{
  "manifestVersion": "3.2",
  "admin": {
    "address": "0xfBccF87bBAC0C8B4277D6C69D4f05B7243A2181f",
    "txHash": "0x1ed092c78e5cfb5010f18fceb9b5ee58c2aa4e0e933a93c6316c1adbbb9b6c62",
    "deployTransaction": {
      "hash": "0x1ed092c78e5cfb5010f18fceb9b5ee58c2aa4e0e933a93c6316c1adbbb9b6c62",
      "type": 2,
      "accessList": [],
      "blockHash": null,
      "blockNumber": null,
      "transactionIndex": null,
      "confirmations": 0,
      "from": "0x3E46BEFDA7112d8954b923ea6bd9f07c2e615e10",
      "gasPrice": {
        "type": "BigNumber",
        "hex": "0x015c808d6d"
      },
      "maxPriorityFeePerGas": {
        "type": "BigNumber",
        "hex": "0x59682f00"
      },
      "maxFeePerGas": {
        "type": "BigNumber",
        "hex": "0x015c808d6d"
      },
      "gasLimit": {
        "type": "BigNumber",
        "hex": "0x0776c2"
      },
      "to": null,
      "value": {
        "type": "BigNumber",
        "hex": "0x00"
      },
      "nonce": 7,
      "data": "0x608060405234801561001057600080fd5b50600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350610759806100616000396000f3fe60806040526004361061007b5760003560e01c80639623609d1161004e5780639623609d1461011157806399a88ec414610124578063f2fde38b14610144578063f3b7dead146101645761007b565b8063204e1c7a14610080578063715018a6146100bc5780637eff275e146100d35780638da5cb5b146100f3575b600080fd5b34801561008c57600080fd5b506100a061009b366004610515565b610184565b6040516001600160a01b03909116815260200160405180910390f35b3480156100c857600080fd5b506100d1610215565b005b3480156100df57600080fd5b506100d16100ee366004610554565b610292565b3480156100ff57600080fd5b506000546001600160a01b03166100a0565b6100d161011f36600461058c565b61031c565b34801561013057600080fd5b506100d161013f366004610554565b6103ad565b34801561015057600080fd5b506100d161015f366004610515565b610405565b34801561017057600080fd5b506100a061017f366004610515565b6104ef565b6000806000836001600160a01b03166040516101aa90635c60da1b60e01b815260040190565b600060405180830381855afa9150503d80600081146101e5576040519150601f19603f3d011682016040523d82523d6000602084013e6101ea565b606091505b5091509150816101f957600080fd5b8080602001905181019061020d9190610538565b949350505050565b6000546001600160a01b031633146102485760405162461bcd60e51b815260040161023f906106c0565b60405180910390fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031633146102bc5760405162461bcd60e51b815260040161023f906106c0565b6040516308f2839760e41b81526001600160a01b038281166004830152831690638f283970906024015b600060405180830381600087803b15801561030057600080fd5b505af1158015610314573d6000803e3d6000fd5b505050505050565b6000546001600160a01b031633146103465760405162461bcd60e51b815260040161023f906106c0565b60405163278f794360e11b81526001600160a01b03841690634f1ef286903490610376908690869060040161065d565b6000604051808303818588803b15801561038f57600080fd5b505af11580156103a3573d6000803e3d6000fd5b5050505050505050565b6000546001600160a01b031633146103d75760405162461bcd60e51b815260040161023f906106c0565b604051631b2ce7f360e11b81526001600160a01b038281166004830152831690633659cfe6906024016102e6565b6000546001600160a01b0316331461042f5760405162461bcd60e51b815260040161023f906106c0565b6001600160a01b0381166104945760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161023f565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000806000836001600160a01b03166040516101aa906303e1469160e61b815260040190565b600060208284031215610526578081fd5b81356105318161070b565b9392505050565b600060208284031215610549578081fd5b81516105318161070b565b60008060408385031215610566578081fd5b82356105718161070b565b915060208301356105818161070b565b809150509250929050565b6000806000606084860312156105a0578081fd5b83356105ab8161070b565b925060208401356105bb8161070b565b9150604084013567ffffffffffffffff808211156105d7578283fd5b818601915086601f8301126105ea578283fd5b8135818111156105fc576105fc6106f5565b604051601f8201601f19908116603f01168101908382118183101715610624576106246106f5565b8160405282815289602084870101111561063c578586fd5b82602086016020830137856020848301015280955050505050509250925092565b600060018060a01b038416825260206040818401528351806040850152825b818110156106985785810183015185820160600152820161067c565b818111156106a95783606083870101525b50601f01601f191692909201606001949350505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461072057600080fd5b5056fea2646970667358221220d849f96f3086b9f82cdcf665adb8c697ace05638da1c7c16ab2d26293717af6764736f6c63430008020033",
      "r": "0xd6c0d23e523b20ffce858a34ffdf442e8825f7205f268e82aaf525da971f97ca",
      "s": "0x1537cc9d5f7d11c11f9b995c6fd64e8a6c8badbf7ef6d91513344c79c589e50f",
      "v": 1,
      "creates": "0xfBccF87bBAC0C8B4277D6C69D4f05B7243A2181f",
      "chainId": 11155111
    }
  },
  "proxies": [
    {
      "address": "0xA4e473442E5fE276c8fC11e64B91829A0bDA1Fd7",
      "txHash": "0xcd125adf71af352719d1175f4d1999c30eb48054fbf9900ae1e697e726b26744",
      "kind": "transparent"
    },
    {
      "address": "0x232FdD286B49AA63A0BE21838a5a92267e56F22e",
      "txHash": "0xb979e4a67992d1f7c3a23976578f93f86b4294fe3a698956a8109581cc3fc3b2",
      "kind": "transparent"
    },
    {
      "address": "0xAA9DF46226F9AEf57eB0218A84bd5876372b54cf",
      "txHash": "0xc8a3f52e8c25c92ec13004da6e07e32d0ab35cf319302e0f11089a7c26aa698a",
      "kind": "transparent"
    },
    {
      "address": "0x9206E763776308bed1255507A7674f7590d457b0",
      "txHash": "0x925bd0610628e21c058d236fe30f6e86f1cd0cd9bc0c9678c37eb9a068fabed1",
      "kind": "transparent"
    }
  ],
  "impls": {
    "c583cf85669528500d1e022261e4ca34716f055963366fdd1ac8cdf7cea4ede4": {
      "address": "0xA96c9146C91a3125a9432d9ad0570CBBDfC3e198",
      "txHash": "0x81d4af0b3611b98cbe9db7506bb426f27701787a613048384c76b231b71869b4",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:102"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:235"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "stakeManager",
            "type": "t_contract(IStakeManager)10949",
            "src": "contracts/NodeOperatorRegistry.sol:22"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "stMATIC",
            "type": "t_contract(IStMATIC)10873",
            "src": "contracts/NodeOperatorRegistry.sol:25"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "version",
            "type": "t_string_storage",
            "src": "contracts/NodeOperatorRegistry.sol:28"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "DISTANCE_THRESHOLD_PERCENTS",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:40"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "MAX_WITHDRAW_PERCENTAGE_PER_REBALANCE",
            "type": "t_uint256",
            "src": "contracts/NodeOperatorRegistry.sol:43"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "MIN_REQUEST_WITHDRAW_RANGE_PERCENTS",
            "type": "t_uint8",
            "src": "contracts/NodeOperatorRegistry.sol:47"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "validatorIds",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "contracts/NodeOperatorRegistry.sol:50"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "validatorIdToRewardAddress",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/NodeOperatorRegistry.sol:54"
          },
          {
            "contract": "NodeOperatorRegistry",
            "label": "validatorRewardAddressToId",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/NodeOperatorRegistry.sol:58"
          }
        ],
        "types": {
          "t_contract(IStakeManager)10949": {
            "label": "contract IStakeManager"
          },
          "t_contract(IStMATIC)10873": {
            "label": "contract IStMATIC"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)34_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "d4d7a42b986f150b9eea59ed86d0473c85d50a756e38e9551c9c5b2bc2f1912e": {
      "address": "0x7E126B4c6d77ED74C6A37f12bA88A141EFd9D6f3",
      "txHash": "0xc7515a521ecf02bc3d92ff532ec606f02d5a9ef3ef5dd3b29de68d0948199d43",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:87"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:458"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:102"
          },
          {
            "contract": "ERC721PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:46"
          },
          {
            "contract": "PoLidoNFT",
            "label": "stMATIC",
            "type": "t_address",
            "src": "contracts/PoLidoNFT.sol:20"
          },
          {
            "contract": "PoLidoNFT",
            "label": "tokenIdIndex",
            "type": "t_uint256",
            "src": "contracts/PoLidoNFT.sol:23"
          },
          {
            "contract": "PoLidoNFT",
            "label": "version",
            "type": "t_string_storage",
            "src": "contracts/PoLidoNFT.sol:26"
          },
          {
            "contract": "PoLidoNFT",
            "label": "owner2Tokens",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/PoLidoNFT.sol:29"
          },
          {
            "contract": "PoLidoNFT",
            "label": "token2Index",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/PoLidoNFT.sol:32"
          },
          {
            "contract": "PoLidoNFT",
            "label": "address2Approved",
            "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
            "src": "contracts/PoLidoNFT.sol:35"
          },
          {
            "contract": "PoLidoNFT",
            "label": "tokenId2ApprovedIndex",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/PoLidoNFT.sol:38"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
            "label": "mapping(address => uint256[])"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          }
        }
      }
    },
    "cdd278f60e4c78509a30f9ad637ba150888845a845c576ae412bb12744827963": {
      "address": "0x47e7994FFa4455FcAc615613f75CD9c70f704C12",
      "txHash": "0x84ec4d5987e0096e38a64cccaa7ecd44481a94fd0ab921ad7c088645c693884a",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:235"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:102"
          },
          {
            "contract": "StMATIC",
            "label": "nodeOperatorRegistry",
            "type": "t_contract(INodeOperatorRegistry)10324",
            "src": "contracts/StMATIC.sol:29"
          },
          {
            "contract": "StMATIC",
            "label": "entityFees",
            "type": "t_struct(FeeDistribution)10407_storage",
            "src": "contracts/StMATIC.sol:32"
          },
          {
            "contract": "StMATIC",
            "label": "stakeManager",
            "type": "t_contract(IStakeManager)10949",
            "src": "contracts/StMATIC.sol:35"
          },
          {
            "contract": "StMATIC",
            "label": "poLidoNFT",
            "type": "t_contract(IPoLidoNFT)10380",
            "src": "contracts/StMATIC.sol:38"
          },
          {
            "contract": "StMATIC",
            "label": "fxStateRootTunnel",
            "type": "t_contract(IFxStateRootTunnel)10032",
            "src": "contracts/StMATIC.sol:41"
          },
          {
            "contract": "StMATIC",
            "label": "version",
            "type": "t_string_storage",
            "src": "contracts/StMATIC.sol:44"
          },
          {
            "contract": "StMATIC",
            "label": "dao",
            "type": "t_address",
            "src": "contracts/StMATIC.sol:47"
          },
          {
            "contract": "StMATIC",
            "label": "insurance",
            "type": "t_address",
            "src": "contracts/StMATIC.sol:50"
          },
          {
            "contract": "StMATIC",
            "label": "token",
            "type": "t_address",
            "src": "contracts/StMATIC.sol:53"
          },
          {
            "contract": "StMATIC",
            "label": "lastWithdrawnValidatorId",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:56"
          },
          {
            "contract": "StMATIC",
            "label": "totalBuffered",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:59"
          },
          {
            "contract": "StMATIC",
            "label": "delegationLowerBound",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:62"
          },
          {
            "contract": "StMATIC",
            "label": "rewardDistributionLowerBound",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:65"
          },
          {
            "contract": "StMATIC",
            "label": "reservedFunds",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:68"
          },
          {
            "contract": "StMATIC",
            "label": "submitThreshold",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:71"
          },
          {
            "contract": "StMATIC",
            "label": "submitHandler",
            "type": "t_bool",
            "src": "contracts/StMATIC.sol:74"
          },
          {
            "contract": "StMATIC",
            "label": "token2WithdrawRequest",
            "type": "t_mapping(t_uint256,t_struct(RequestWithdraw)10400_storage)",
            "src": "contracts/StMATIC.sol:77"
          },
          {
            "contract": "StMATIC",
            "label": "stMaticWithdrawRequest",
            "type": "t_array(t_struct(RequestWithdraw)10400_storage)dyn_storage",
            "src": "contracts/StMATIC.sol:88"
          },
          {
            "contract": "StMATIC",
            "label": "token2WithdrawRequests",
            "type": "t_mapping(t_uint256,t_array(t_struct(RequestWithdraw)10400_storage)dyn_storage)",
            "src": "contracts/StMATIC.sol:91"
          },
          {
            "contract": "StMATIC",
            "label": "protocolFee",
            "type": "t_uint8",
            "src": "contracts/StMATIC.sol:94"
          },
          {
            "contract": "StMATIC",
            "label": "_status",
            "type": "t_uint256",
            "src": "contracts/StMATIC.sol:99"
          },
          {
            "contract": "StMATIC",
            "label": "recovered",
            "type": "t_bool",
            "src": "contracts/StMATIC.sol:102"
          }
        ],
        "types": {
          "t_contract(INodeOperatorRegistry)10324": {
            "label": "contract INodeOperatorRegistry"
          },
          "t_struct(FeeDistribution)10407_storage": {
            "label": "struct IStMATIC.FeeDistribution",
            "members": [
              {
                "label": "dao",
                "type": "t_uint8"
              },
              {
                "label": "operators",
                "type": "t_uint8"
              },
              {
                "label": "insurance",
                "type": "t_uint8"
              }
            ]
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_contract(IStakeManager)10949": {
            "label": "contract IStakeManager"
          },
          "t_contract(IPoLidoNFT)10380": {
            "label": "contract IPoLidoNFT"
          },
          "t_contract(IFxStateRootTunnel)10032": {
            "label": "contract IFxStateRootTunnel"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_struct(RequestWithdraw)10400_storage)": {
            "label": "mapping(uint256 => struct IStMATIC.RequestWithdraw)"
          },
          "t_struct(RequestWithdraw)10400_storage": {
            "label": "struct IStMATIC.RequestWithdraw",
            "members": [
              {
                "label": "amount2WithdrawFromStMATIC",
                "type": "t_uint256"
              },
              {
                "label": "validatorNonce",
                "type": "t_uint256"
              },
              {
                "label": "requestEpoch",
                "type": "t_uint256"
              },
              {
                "label": "validatorAddress",
                "type": "t_address"
              }
            ]
          },
          "t_array(t_struct(RequestWithdraw)10400_storage)dyn_storage": {
            "label": "struct IStMATIC.RequestWithdraw[]"
          },
          "t_mapping(t_uint256,t_array(t_struct(RequestWithdraw)10400_storage)dyn_storage)": {
            "label": "mapping(uint256 => struct IStMATIC.RequestWithdraw[])"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)34_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          }
        }
      }
    }
  }
}
